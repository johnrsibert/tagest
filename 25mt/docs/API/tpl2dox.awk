BEGIN {
  groupOpen=0
  bracesOpen=0
  functionOpen=0
  lcInstance=0
  token=""
  sectionName=""
  functionName=""
  sep = " ";
  tplType = " 3array _3darray _4darray _5darray _6darray _7darray SPinit_3darray SPinit_4darray SPinit_bounded_3darray SPinit_bounded_matrix SPinit_bounded_number SPinit_bounded_vector SPinit_imatrix SPinit_int SPinit_ivector SPinit_matrix SPinit_number SPinit_vector SPint SPivector SPmatrix SPnumber SPvector constant_quadratic_penalty dll_3darray dll_adstring dll_imatrix dll_init_3darray dll_init_bounded_number dll_init_bounded_vector dll_init_imatrix dll_init_int dll_init_matrix dll_init_number dll_init_vector dll_int dll_matrix dll_number dll_random_effects_vector dll_vector equality_constraint_vector gaussian_prior inequality_constraint_vector init_3darray init_4darray init_5darray init_6darray init_7darray init_adstring init_bounded_3darray init_bounded_dev_vector init_bounded_matrix init_bounded_matrix_vector init_bounded_number init_bounded_number_vector init_bounded_vector init_bounded_vector_vector init_imatrix init_int init_ivector init_line_adstring init_matrix init_matrix_vector init_number init_number_vector init_vector init_vector_vector likeprof_number matrix normal_prior number objective_function_value quadratic_penalty quadratic_prior random_effects_bounded_matrix random_effects_bounded_vector random_effects_matrix random_effects_vector sdreport_matrix sdreport_number sdreport_vector splus_3darray splus_adstring splus_imatrix splus_init_3darray splus_init_bounded_number splus_init_bounded_vector splus_init_matrix splus_init_number splus_init_vector splus_int splus_matrix splus_number splus_vector vector"

  ADType = "  d3_array adstring imatrix ivector ofstream random_number_generator"

  whyDoxString = " Forward declaration inserted by tpl2dox script to prevent documenting variable declarations as functions."

  ADDoxString = "AUTODIF Type. See AUTODIF documentation for details."
# split(ADType, ADTypeArray," ")
# for (i in ADTypeArray)
# {
#   print "/**  "ADDoxString  whyDoxString" */"
#   print "class "ADTypeArray[i] " {public: "ADTypeArray[i]"();};"
# }

# tplDoxString = "ADMB template type. See ADModel Builder Manual."
# split(tplType,tplTypeArray," ")
# for (i in tplTypeArray)
# {
#   print "/** "tplDoxString  whyDoxString " */"
#   print "class "tplTypeArray[i] " {public: "tplTypeArray[i]"();};"
# }


# print("/** \\defgroup INITIALIZATION_SECTION INITIALIZATION_SECTION */")
# print("/** \\defgroup REPORT_SECTION REPORT_SECTION*/")
# print("/** \\defgroup FINAL_SECTION FINAL_SECTION*/")
# print("/** \\defgroup RUNTIME_SECTION RUNTIME_SECTION*/")
# print("/** \\defgroup PRELIMINARY_CALCULATIONS_SECTION PRELIMINARY_CALCULATIONS_SECTION*/")
# print("/** \\defgroup PRELIMINARY_CALCS_SECTION PRELIMINARY_CALCS_SECTION*/")
# print("/** \\defgroup BETWEEN_PHASES_SECTION BETWEEN_PHASES_SECTION*/")
# print("/** \\defgroup SLAVE_SECTION SLAVE_SECTION*/")
# print("/** \\defgroup DATA_SECTION DATA_SECTION*/")
# print("/** \\defgroup PARAMETER_SECTION PARAMETER_SECTION*/")
# print("/** \\defgroup PROCEDURE_SECTION PROCEDURE_SECTION*/")
# print("/** \\defgroup GLOBALS_SECTION GLOBALS_SECTION*/")
# print("/** \\defgroup TOP_OF_MAIN_SECTION TOP_OF_MAIN_SECTION*/")

}

# processing starts here
{
  sub("!!","")
  sub(" 3darray","_3darray")
# sub(" 3darray"," d3_array")
  sub(" 4darray"," _4darray")

  if ($1 == "/**")
  {
  # print "doxBloc start: " $0
    doxBlock = $0
    while (match($0, "*/") == 0)
    {
      getline
  #   print "gotline: " $0
      doxBlock = doxBlock $0
    }
  # print "doxBlock: " doxBlock
  } 

  if ((sectionName == "DATA_SECTION") || (sectionName == "PARAMETER_SECTION"))
  {
    tmatch = index(tplType,$1)
    if (tmatch > 1)
    {
    # print "before sub: "$0
      sub(".*","&;",$2)
    # print "after  sub: "$0
      line = "  "$1
      for (i =2; i <= NF; i++)
        line = line sep $i
    
      $0 = line;
    # print $0
      gsub(";;",";");
      print $0
    }
  }

  if (match($1, "^.*_SECTION") > 0)
  {
    if (token == "FUNCTION")
      closeBraces()
    if (functionOpen)
      closeFunction()
    closeSection()
    token = $1
    openSection($1)

   if ($1 == "DATA_SECTION")
   {
      print("/** Specify model data.")
      print("Automatically generated by ADMB from the DATA_SECTION. */")
   #   openFunction("void model_data()")
   }
    
   #else 
   if ($1 == "REPORT_SECTION")
    {
      openFunction("void report(void)")
    }

    else if ($1 == "PROCEDURE_SECTION")
    {
      print ("/** User Function. Automatically generated by ADMB from the PROCEDURE_SECTION. */")
      openFunction("void userfunction(void)")
    }

    else if ($1 == "PARAMETER_SECTION")
    {
       print("/** Declares model parameters.")
       print("Generates call to model_parameters constructor.")
       print("Automatically generated by ADMB from the PARAMETER_SECTION. */")
    #  openFunction("model_parameters(int sz,int argc,char * argv[])")
    }
    else if ($1 == "PRELIMINARY_CALCS_SECTION")
    {
       print("/** Initialize model parameters.")
    #  print "\\addtogroup  PARAMETER_SECTION"
       print "\\ingroup  PARAMETER_SECTION"
       print("Automatically generated by ADMB from the PRELIMINARY_CALCS_SECTION */")
       openFunction("preliminary_calculations(void)")
    }

    else if ($1 == "TOP_OF_MAIN_SECTION")
    {
       print ("/** Initialize global variables.")
       print("Automatically generated by ADMB from the TOP_OF_MAIN_SECTION*/")
       openFunction("int main(int argc,char * argv[])")
    }

    else if ($1 == "FINAL_SECTION")
      openFunction("void final_calcs(void)")
  }
  else if ($1 == "LOCAL_CALCS")
  {
  #  lcInstance = lcInstance + 1
  #  calcName = sprintf("%s_%03d",$1,lcInstance)
  #  token = $1
  #  print  "void " calcName "(){"
  ## print "//--->" calcName
     print "  //--->" $1
  }
  else if ($1 == "END_CALCS")
  {
  #  token = $1
  #  print "}"
     print "  //--->" $1
  }
  else if ($1 == "FUNCTION")
  {
  # print NF,$0
  # if (token == "FUNCTION")
    if (functionOpen)
      closeFunction()
    closeSection()
    token = $1
    fline = ""
    print "/// \\addtogroup  PARAMETER_SECTION"
    print "//@{  //" groupOpen
    groupOpen = groupOpen + 1
    sectionName = "FUNCTION "$2
    if (NF > 2)
    {
      fline = $2
      for (i = 3; i <= NF; i++)
        fline = fline" "$i
    }
    else
    {
      fline = "void "$2"(void)"
    }
    print(doxBlock)
    doxBlock = ""
    openFunction(fline)
  }
  else
  {
    print $0
  }
}

END{
  while (functionOpen >0)
     closeFunction()
  while (bracesOpen > 0)
     closeBraces()
  closeSection()
}

# define some functions
function closeSection()
{
  while (groupOpen > 0)
  {
    closeGroup()
  }
}

function closeGroup()
{
  groupOpen = groupOpen - 1
  print "//@}  //" groupOpen " end " sectionName
}

function openSection(secName)
{
  print "/// \\defgroup " secName " " secName
  print "///    \\ingroup TPL"
  print "//@{  //" groupOpen
  
  groupOpen = groupOpen + 1
  sectionName = secName;
}

#function openSubSection(subName)
#{
#  print "/// \\name " subName
#  print "//@{  //" groupOpen
#  groupOpen = groupOpen + 1
#}


function openBraces()
{
    print "{"
    bracesOpen = bracesOpen + 1
}

function closeBraces()
{
  if (bracesOpen > 0)
  {
    print("} // braces open = ",bracesOpen)
    --bracesOpen
  }
}

function openFunction(funcName)
{
  print funcName
  functionName=funcName
  ++functionOpen
  openBraces()
# print "// bracesOpen ",bracesOpen," functionOpen ",functionOpen
}

function closeFunction()
{
  closeBraces()
  print "// end of function",functionName
  functionName=""
  --functionOpen
}
