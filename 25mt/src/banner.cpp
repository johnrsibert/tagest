//$Id: banner.cpp 2908 2011-12-31 00:24:39Z johnoel $
#include <fvar.hpp>
#include <adstring.hpp>
#if (__GNUC__ >=3)
  #include <strstream>
  using namespace std;
#else
  #include <strstrea.h>
  #include <iomanip.h>
#endif


//extern adstring copyright; ///< Text string containing copyright information; defined in the .tpl file

/*! \brief Generates a boast.
     Provides information on SVN revision number, compiler and operating system.
     Includes the file
     "banner-info.cpp" containg information generated by the makefile.
    \param program_name a adstring containing a version, e.g. "4.0x"
    \return an adstring containg the boast
 */
adstring make_banner(const adstring& program_name)
{
  #ifndef __APPLE__
  #include "banner-info.cpp"
  #endif

  char s[500];
  std::ostrstream ss(s,500);
  ss << program_name;
  #ifndef __APPLE__
  ss << "\n  Source directory: " << wd;
  ss << "\n  SVN revision number: " << rev;
  #endif
  ss << "\n  Compiler: ";
  
#if defined(__BCPLUSPLUS__)
  ss << "Borland C++" << hex << __BORLANDC__;
#elif defined (_MSC_VER)
  ss << "Microsoft Visual C++" << hex << _MSC_VER;
#elif defined (__SC__)
  ss <<  "Symantec C++" << hex << __SC__;
#elif defined (__ZTC__)
  ss << "Zortech C++" << hex << __ZTC__;
#elif defined(__CYGWIN32__)
  ss << "Gnu C++ for Cygwin" __GNUC__ << '.' << __GNUC_MINOR__ << '.' << __GNUC_PATCHLEVEL__;
#elif defined(__GNUC__)
  ss <<  "Gnu C++" << __GNUC__ << '.' << __GNUC_MINOR__ << '.' << __GNUC_PATCHLEVEL__;
#elif defined(sun)
  ss << "Sun C++";
  #ifdef __SUNPRO_CC
    ss << hex << __SUNPRO_CC;
  #endif
#elif defined(__NDPX__)
  #ifdef __i860
    ss << "(NDP i860 C++ version)";
  #else
    ss << "(NDP C++ version)";
  #endif
#else
   ss << "Unknown Compiler";
#endif

#if defined (__ZTC__) || defined (__SC__)
  #ifdef DOS386
    ss << ", DOS protected mode";
  #endif
#endif

  #ifndef __APPLE__
  ss << " on " << host;
  ss << "\n  Architecture: " << 8*sizeof(void*) << " bits";
  ss << "\n  Operating system: " << os;
  if (which_library() == 'o')
     ss << "\n  Optimized ADMB libraries";
  else
     ss << "\n  Safe ADMB libraries";
  ss << ", Version " << admb_version << "\n";
  #endif
  ss << '\0';


  return(adstring(s));
}

/*
int main(void)
{
   cout << make_banner(__FILE__) << endl;
   return(0);
}
*/
